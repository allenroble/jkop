
/*
* This file is part of Jkop Mix
* Copyright (c) 2017 Job and Esther Technologies Oy
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

class is Node:

var attributes as NamedNodeMap
var classList as DOMTokenList
prop className as string
prop clientHeight as double
prop clientLeft as double
prop clientTop as double
prop clientWidth as double
prop id as string
prop innerHTML as string
prop localName as string
prop outerHTML as string
prop prefix as string
prop scrollHeight as double
prop scrollLeft as double
prop scrollLeftMax as double
prop scrollTop as double
prop scrollTopMax as double
prop scrollWidth as double
prop shadowRoot as ShadowRoot
prop slot as string
prop tagName as string
var namespaceURI as string

func getNameSpaceURI as string:
	return namespaceURI

func attachShadow(shadowRootInit as object) stub as ShadowRoot

func getAttribute(attName as string) as string
{
	assert attName
	var att = attributes.getNamedItem(attName)
	return att.getNodeValue()
}

func getAttributeNames as vector<string>
{
	var attrs = new vector<string>
	if attributes.getLength() > 0 {
		foreach attr in attributes.getAttrs() {
			attrs += attr.getNodeName()
		}
	}
	return attrs
}

func getAttribute as NamedNodeMap:
	return attributes

func getClassList as DOMTokenList:
	return classList

func getAttributeNS(nameSpace as string, name as string) as string
{
	assert attributes
	var attrs = attributes.getAttrsByNameSpace(nameSpace)
	foreach att in attrs {
		if String.equals(name ,att.getNodeName()):
			return att.getNodeValue()
	}
	return null
}

func getBoundingClientRect stub as int
func getClientRects stub as vector<DOMRect>

func getElementsByTagName(name as string) as HTMLCollection
{
	assert name
	var ns = getChildNodes()
	var collection = new HTMLCollection()
	foreach child as Element in ns.getNodes() {
		if String.equals(name, child.getTagName()):
			collection.addElement(child)
	}
	return collection
}

func getElementsByTagNameNS(nameSpace as string, name as string) stub as HTMLCollection

func getElementsByClassName(name as string) as HTMLCollection
{
	assert name
	var ns = getChildNodes()
	var collection = new HTMLCollection()
	foreach child as Element in ns.getNodes() {
		if String.equals(name, child.getClassName()):
			collection.addElement(child)
	}
	return collection
}

func getElementsByTagName(name as string) as HTMLCollection
{
	assert name
	var ns = getChildNodes()
	var collection = new HTMLCollection()
	foreach child as Element in ns.getNodes() {
		if String.equals(name, child.getTagName()):
			collection.addElement(child)
	}
	return collection
}

func hasAttribute(name as string) as bool
{
	assert name
	if attributes.getNamedItem(name):
		return true
	return false
}

func hasAttributeNS(nameSpace as string, localName as string) as bool
{
	if getAttributeNS(nameSpace, localName):
		return true
	return false
}

func hasAttributes as bool
{
	if Vector.getSize(attributes.getAttrs()) > 0:
		return true
	return false
}

func setCapture(retargetToElement as bool) stub
func hasPointerCapture(pointerId as int) stub as bool
func insertAdjacentElement(position as string, elem as object) stub as object
func insertAdjacentHTML(position as string, text as string) stub
func insertAdjacentText(position as string, elem as string) stub
func matches(element as object, str as string) stub as bool
func releasePointerCapture(pointerId as int) stub

func removeAttribute(name as string)
{
	assert attributes
	var attr = attributes.getNamedItem(name)
	attributes.removeAttr(attr)
}

func removeAttributeNS(nameSpace as string, attrName as string)
{
	var attrs = attributes.getAttrsByNameSpace(nameSpace)
	foreach att in attrs {
		if String.equals(att.getNodeName(), attrName):
			attributes.removeAttr(att)
	}
}

func removeEventListener stub
func scroll(x as int, y as int) stub
func scrollBy(x as int, y as int) stub
func scrollTo(x as int, y as int) stub

func setAttribute(name as string, val as string)
{
	assert name
	assert val
	var att = Attr.instance(name, val)
	attributes.addAttr(att)
}

func setAttributeNS(nameSpace as string, name as string, val as string)
{
	assert nameSpace
	assert name
	var att = Attr.instance(name, val, nameSpace)
	attributes.addAttr(att)
}

func setPointerCapture(pointerId as int) stub

func toggleAttribute(name as string) as bool
{
	assert name
	var att = attributes.getNamedItem(name)
	if att {
		attributes.removeAttr(att)
	}
	else {
		attributes.addAttr(att)
	}
	return hasAttribute(name)
}

func duplicate override as Node
{
	var v = new this()
	assert copyTo(v)
	return v
}

func copyTo(node as this) as bool
{
	assert base.copyTo(node)
	node.attributes = attributes
	node.classList = classList
	node.setClassName(className)
	node.setClientHeight(clientHeight)
	node.setClientLeft(clientLeft)
	node.setClientTop(clientTop)
	node.setClientWidth(clientWidth)
	node.setId(id)
	node.setInnerHTML(innerHTML)
	node.setLocalName(localName)
	node.setOuterHTML(outerHTML)
	node.setPrefix(prefix)
	node.setScrollHeight(scrollHeight)
	node.setScrollLeft(scrollLeft)
	node.setScrollLeftMax(scrollLeftMax)
	node.setScrollTop(scrollTop)
	node.setScrollTopMax(scrollTopMax)
	node.setScrollWidth(scrollWidth)
	node.setShadowRoot(shadowRoot)
	node.setSlot(slot)
	node.setTagName(tagName)
	node.namespaceURI = namespaceURI
	return true
}


/*
* This file is part of Jkop Mix
* Copyright (c) 2017 Job and Esther Technologies Oy
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

class:

class MyEntryIterator is Iterator<dynamic>
{
	ctor(nodevaluess as vector<dynamic>)
	{
		this.values = values
		this.index = 0
	}

	var index as int
	var values as vector<Node>

	func hasNext as bool
	{
		assert values
		assert index < (SIZE values) - 1
		return true
	}

	func next as int
	{
		assert values
		if index < 0 || index >= SIZE values:
			return null
		var node = Vector.get(values, index)
		index ++
		return node
	}
}

var data as set<dynamic>
var size as int

ctor(data as object)
{
	this.data = new set {}
	if data is string {
		add(data as! string)
	}
	else if data is array {
		var darr = data as! array
		foreach datum as dynamic in darr:
			add(datum)
	}
}

func add(value as dynamic):
	jk.lang.Set.add(data, value)

func delete(value as dynamic)
{
	assert has(value)
	jk.lang.Set.remove(data, value)
	return has(value) == false
}

func has(value as dynamic) as bool:
	return jk.lang.Set.contains(data, value)

func clear:
	jk.lang.Set.clear(data)

func entries as Iterator<dynamic>:
	return new MyEntryIterator(jk.lang.Set.getValues(data))


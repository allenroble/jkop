
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is Iterateable<int>:

func forIntegerValues(lowerBound as int, upperBound as int, exclusionType as int = TYPE_NONE) static as this
{
	var v = new this()
	v.setLowerBound(Integer.asObject(lowerBound))
	v.setUpperBound(Integer.asObject(upperBound))
	v.setExclusionType(exclusionType)
	return v
}

func forDoubleValues(lowerBound as double, upperBound as double, exclusionType as int = TYPE_NONE) static as this
{
	var v = new this()
	v.setLowerBound(Double.asObject(lowerBound))
	v.setUpperBound(Double.asObject(upperBound))
	v.setExclusionType(exclusionType)
	return v
}

const TYPE_NONE = 0
const TYPE_EXCLUDE_UPPER_BOUND = 1
const TYPE_EXCLUDE_LOWER_BOUND = 2
const TYPE_EXCLUDE_BOTH_BOUNDS = 3

var lowerBound as object
var upperBound as object
var exclusionType as int

ctor private:
	;

func setLowerBound(lowerBound as object) private:
	this.lowerBound = lowerBound

func setUpperBound(upperBound as object) private:
	this.upperBound = upperBound

func setExclusionType(exclusionType as int) private:
	this.exclusionType = exclusionType

func getLowerBoundAsInteger as int:
	return Integer.asInteger(lowerBound)

func getLowerBoundAsDouble as double:
	return Double.asDouble(lowerBound)

func getUpperBoundAsInteger as int:
	return Integer.asInteger(upperBound)

func getUpperBoundAsDouble as double:
	return Double.asDouble(upperBound)

func containsIntegerValue(value as int) as bool:
	return containsDoubleValue(value as! double)

func containsDoubleValue(value as double) as bool
{
	var lv = getLowerBoundAsDouble()
	var uv = getUpperBoundAsDouble()
	if exclusionType == TYPE_NONE {
		return value >= lv && value <= uv
	}
	else if exclusionType == TYPE_EXCLUDE_UPPER_BOUND {
		return value >= lv && value < uv
	}
	else if exclusionType == TYPE_EXCLUDE_LOWER_BOUND {
		return value > lv && value <= uv
	}
	else if exclusionType == TYPE_EXCLUDE_BOTH_BOUNDS {
		return value > lv && value < uv
	}
	return false
}

class RangeIterator is Iterator<int>
{
	var range as array<int>
	var index as int

	ctor(range as array<int>)
	{
		this.range = range
		index = 0
	}

	func next as int
	{
		if range == null:
			return 0
		if index < 0 || index >= SIZE range:
			return 0
		var v = range[index]
		index ++
		return v
	}

	func hasNext as bool
	{
		assert range
		assert index < (SIZE range) - 1
		return true
	}
}

func iterate as Iterator<int>
{
	var lv = getLowerBoundAsInteger()
	var uv = getUpperBoundAsInteger()
	var sz as int
	var st as int
	if lv <= uv {
		sz = uv - lv
		st = 1
	}
	else {
		sz = lv - uv
		st = -1
	}
	if exclusionType == TYPE_NONE {
		sz = sz + 1
	}
	else if exclusionType == TYPE_EXCLUDE_UPPER_BOUND {
		uv = uv - 1
	}
	else if exclusionType == TYPE_EXCLUDE_LOWER_BOUND {
		lv = lv + 1
	}
	else if exclusionType == TYPE_EXCLUDE_BOTH_BOUNDS {
		sz = sz - 1
		uv = uv - 1
		lv = lv + 1
	}
	var vv = new int[sz]
	var iv = lv
	for(var ii = 0; ii <= sz; ii++) {
		vv[ii] = iv
		iv = iv + st
	}
	return new RangeIterator(vv)
}
